<?php

require_once __DIR__.'/vendor/autoload.php';
use Elasticsearch\ClientBuilder;


$client = ClientBuilder::create()
    ->setHosts(['127.0.0.1:9201'])
    ->setBasicAuthentication('elastic', '123456')
    ->build();//连接搜索引擎

// 只能创建一次
$params = [
    'index' => 'index',
    'type' => '_doc',
    'body' => []
];
/** 创建表 */
//$res = $client->index($params);
/** 参数 */
$params = ['index' => 'my_index2'];
/** 创建表 */
//$response = $client->indices()->create($params);
/** 删除表 */
//$response = $client->indices()->delete($params);

/** 创建表 */
$params = [
    'index' => 'my_index',
    'body' => [
        '_source' => [
            'enabled' => true
        ],
        'properties' => [
            'first_name' => [
                'type' => 'text',
                'analyzer' => 'standard'
            ],
            'age' => [
                'type' => 'integer'
            ]
        ]
    ]
];

/** 更新表结构 */
$response =$client->indices()->putMapping($params);

// Get mappings for all indices
/** 获取所有的表结构 */
$response = $client->indices()->getMapping();
//var_dump($response);
/** 获取制定表的结构 */
// Get mappings in 'my_index'
$params = ['index' => 'my_index'];
//$response = $client->indices()->getMapping($params);
//var_dump($response);
/** 获取制定多个表的结构 */
// Get mappings for two indices
$params = [
    'index' => [ 'my_index', 'my_index2' ]
];
//$response = $client->indices()->getMapping($params);
//var_dump($response);
/** 写入数据，指定id */
$params = [
    'index' => 'my_index',
    'id'    => 'my_id',
    'body'  => [ 'first_name' => 'tom','age'=>52]
];
/** 忽略id值，系统自动生成自增id */
// Document will be indexed to my_index/_doc/my_id
// $response = $client->index($params);
//print_r($response);

$params = [
    'index' => 'my_index',
    'body'  => [ 'testField' => 'abc']
];

// Document will be indexed to my_index/_doc/<autogenerated ID>
//$response = $client->index($params);
//var_dump($response);
/** 指定其他属性，比如路由 但是不支持时间戳，如果指定了id，如果有则更新，没有则添加 */
$params = [
    'index'     => 'my_index',
    'id'        => 'my_id',
    'routing'   => 'company_xyz',
    //'timestamp' => strtotime("-1d"),
    'body'      => [ 'testField' => 'abc']
];


//$response = $client->index($params);
//var_dump($response);
/** 批量写入 */
$params = [];
for($i = 0; $i < 100; $i++) {
    $params['body'][] = [
        'index' => [
            '_index' => 'my_index',
        ]
    ];

    $params['body'][] = [
        'my_field'     => 'my_value',
        'second_field' => 'some more values'
    ];
}
/** 单个数据写入用index ，批量写入用bulk */
//$responses = $client->bulk($params);
//var_dump($responses);
/** 通过id查询数据 ,id是必填项 */
$params = [
    'index' => 'my_index',
    'id'    => 'my_id'
];

// Get doc at /my_index/_doc/my_id
//$response = $client->get($params);
//var_dump($response);
/** 通过id更新数据 可以更新字段，也可以添加新字段 */
$params = [
    'index' => 'my_index',
    'id'    => 'my_id',
    'body'  => [
        'doc' => [
            'new_field' => 'abc'
        ]
    ]
];

// Update doc at /my_index/_doc/my_id
//$response = $client->update($params);
//var_dump($response);

/** 使用id删除 */
$params = [
    'index' => 'my_index',
    'id'    => 'my_id'
];

// Delete doc at /my_index/_doc_/my_id
//$response = $client->delete($params);
//var_dump($response);

/** 搜索 body传query，客户端调用search方法执行查询 */

/** 使用数组搜索 */
$params = [
    'index' => 'my_index',
    'body'  => [
        'query' => [
            'match' => [
                'testField' => 'abc'
            ]
        ]
    ]
];

//$results = $client->search($params);
//var_dump($results);

/** 使用json字符串搜索 */
$json = '{
    "query" : {
        "match" : {
            "testField" : "abc"
        }
    }
}';

$params = [
    'index' => 'my_index',
    'body'  => $json
];

//$results = $client->search($params);
//var_dump($results);

/** 布尔值查询并且查询 */
$params = [
    'index' => 'my_index',
    'body'  => [
        'query' => [
            'bool' => [
                /** and查询 */
                'must' => [
                    [ 'match' => [ 'testField' => 'abc' ] ],
                    [ 'match' => [ 'testField2' => 'xyz' ] ],
                ]
            ]
        ]
    ]
];

//$results = $client->search($params);
//var_dump($results);

$params = [
    'index' => 'my_index',
    'body'  => [
        'query' => [
            'bool' => [
                /** 精确筛选，就是必须满足当前条件 */
                'filter' => [
                    /** term 精确查询，必须等于abc才算满足 */
                    'term' => [ 'testField' => 'abc' ]
                ],
                /** 或者筛选 or 查询  */
                'should' => [
                    /** match 模糊匹配，只要age包含52就算满足 */
                    'match' => [ 'age' => 52 ]
                ]
            ]
        ]
    ]
];


//$results = $client->search($params);
//var_dump($results);

/** 翻页查询 */
//$params = [
//    /** 分页数据有效期为30秒 */
//    'scroll' => '30s',
//    /** 每一页条数 */
//    'size'   => 10,
//    'index'  => 'my_index',
//    'body'   => [
//        'query' => [
//            /** 查询所有 */
//            'match_all' => new \stdClass()
//        ]
//    ]
//];
///** 执行查询 */
//$response = $client->search($params);
//var_dump("第一次查询",$response);
///** 循环获取数据 ，实现翻页功能 */
//while (isset($response['hits']['hits']) && count($response['hits']['hits']) > 0) {
//    var_dump('后面的查询',$response['hits']['hits']);
//    /** 当前页 */
//    $scroll_id = $response['_scroll_id'];
//    /** 获取下一页 */
//    $response = $client->scroll([
//        'body' => [
//            'scroll_id' => $scroll_id,
//            'scroll'    => '30s'
//        ]
//    ]);
//}

/** 分页查询 */
$params = [
    'index' =>'my_index',
    'body'  => [
        'query' => [
            // 这里可以是各种查询条件，如match、term等，假设先使用match_all查询所有文档
            'match_all' => new \stdClass()
        ]
    ],
    'from' => 0,
    'size' => 10
];
//$result = $client->search($params);
//var_dump($result);
/** 创建表结构 */
$client = ClientBuilder::create()->build();
$params = [
    'index' => 'my_index',
    'body' => [
        'settings' => [
            'number_of_shards' => 3,
            'number_of_replicas' => 2
        ],
        'mappings' => [
            '_source' => [
                'enabled' => true
            ],
            'properties' => [
                'first_name' => [
                    'type' => 'keyword'
                ],
                'age' => [
                    'type' => 'integer'
                ]
            ]
        ]
    ]
];


// Create the index with mappings and settings now
$response = $client->indices()->create($params);